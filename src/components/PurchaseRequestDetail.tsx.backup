import React, { useState } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Typography,
  Box,
  Card,
  CardContent,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Chip,
  TextField,
  Alert,
  CircularProgress,
  IconButton,
  Divider,
  Collapse,
  CardHeader,
} from '@mui/material';
import {
  Close as CloseIcon,
  ExpandMore as ExpandMoreIcon,
  ExpandLess as ExpandLessIcon,
} from '@mui/icons-material';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { doc, updateDoc, arrayUnion, Timestamp } from 'firebase/firestore';
import { db } from '../firebase';
import { useAuth } from '../contexts/AuthContext';
import { PurchaseRequest, BranchDispatchInfo } from '../types';

interface PurchaseRequestDetailProps {
  open: boolean;
  onClose: () => void;
  request: PurchaseRequest | null;
  onUpdate: () => void;
  editMode?: boolean;  // 편집 모드 여부
  editSection?: string; // 편집할 섹션 ('ecount' | 'po' | 'warehouse' | 'dispatch' | 'receipt')
}

const PurchaseRequestDetail: React.FC<PurchaseRequestDetailProps> = ({
  open,
  onClose,
  request,
  onUpdate,
  editMode,
  editSection,
}) => {
  const { userProfile } = useAuth();
  const [processing, setProcessing] = useState(false);
  const [error, setError] = useState('');
  const [comment, setComment] = useState('');

  // Phase 2: 구매처 발주 관련 상태
  const [expectedDeliveryDate, setExpectedDeliveryDate] = useState<Date | null>(null);
  const [expectedDeliveryQuantity, setExpectedDeliveryQuantity] = useState<number>(0);
  const [actualSupplier, setActualSupplier] = useState('');
  const [poMemo, setPoMemo] = useState('');

  // Phase 2: 물류창고 입고 관련 상태
  const [actualReceiptDate, setActualReceiptDate] = useState<Date | null>(new Date());
  const [actualReceivedQuantity, setActualReceivedQuantity] = useState<number>(0);
  const [warehouseReceiptMemo, setWarehouseReceiptMemo] = useState('');

  // Phase 2: 지점 출고 관련 상태
  const [branchDispatchQuantities, setBranchDispatchQuantities] = useState<BranchDispatchInfo[]>([]);
  const [dispatchMemo, setDispatchMemo] = useState('');

  // Phase 2: 지점 입고 확인 관련 상태
  const [branchReceiptQuantities, setBranchReceiptQuantities] = useState<BranchDispatchInfo[]>([]);

  // 지점별 출고 수량 편집 모드 상태
  const [editingBranchIndex, setEditingBranchIndex] = useState<number | null>(null);

  // 이카운트 등록용 품목그룹 상태
  const [itemGroup1, setItemGroup1] = useState('');
  const [itemGroup2, setItemGroup2] = useState('');
  const [itemGroup3, setItemGroup3] = useState('');

  // 펼치기/접기 상태 관리
  const [expandedSections, setExpandedSections] = useState({
    basicInfo: true,       // 기본 정보 (항상 열림)
    partInfo: false,       // 부품 정보 (기본 접힘으로 변경)  
    progressInfo: false,   // 진행 상세 정보
    branchInfo: false,     // 지점별 요청수량
    history: false,       // 상태 히스토리
  });

  // 펼치기/접기 토글 함수
  const toggleSection = (section: keyof typeof expandedSections) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  };

  // 컴포넌트 초기화 시 기본값 설정
  React.useEffect(() => {
    if (request) {
      // 편집 모드일 때 기존 데이터 로드
      if (editMode && editSection) {
        switch (editSection) {
          case 'ecount':
            if (request.itemGroup1) {
              setItemGroup1(request.itemGroup1);
            }
            if (request.itemGroup2) {
              setItemGroup2(request.itemGroup2);
            }
            if (request.itemGroup3) {
              setItemGroup3(request.itemGroup3);
            }
            break;
          case 'po':
            if (request.expectedDeliveryDate) {
              setExpectedDeliveryDate(request.expectedDeliveryDate);
            }
            if (request.expectedDeliveryQuantity) {
              setExpectedDeliveryQuantity(request.expectedDeliveryQuantity);
            }
            if (request.actualSupplier) {
              setActualSupplier(request.actualSupplier);
            }
            if (request.poMemo) {
              setPoMemo(request.poMemo);
            }
            break;
          case 'warehouse':
            if (request.warehouseReceiptAt) {
              setActualReceiptDate(request.warehouseReceiptAt);
            }
            if (request.actualReceivedQuantity) {
              setActualReceivedQuantity(request.actualReceivedQuantity);
            }
            if (request.warehouseReceiptMemo) {
              setWarehouseReceiptMemo(request.warehouseReceiptMemo);
            }
            break;
          case 'dispatch':
            if (request.dispatchMemo) {
              setDispatchMemo(request.dispatchMemo);
            }
            // branchDispatchQuantities는 하단의 통합 초기화 로직에서 처리
            break;
          case 'receipt':
            if (request.branchDispatchQuantities) {
              setBranchReceiptQuantities(request.branchDispatchQuantities);
            }
            break;
        }
      } else {
        // 일반 모드일 때 기본값 설정
        setExpectedDeliveryQuantity(request.totalRequestedQuantity);
        setActualReceivedQuantity(request.expectedDeliveryQuantity || request.totalRequestedQuantity);
        
        // 이카운트 등록 모드에서 기존 품목그룹 정보 로드 (편집 모드가 아닐 때도)
        if (!editMode && request.currentStatus === 'operations_submitted') {
          if (request.itemGroup1) {
            setItemGroup1(request.itemGroup1);
          }
          if (request.itemGroup2) {
            setItemGroup2(request.itemGroup2);
          }
          if (request.itemGroup3) {
            setItemGroup3(request.itemGroup3);
          }
        }
      }
      
      // 지점별 출고 수량 초기화
      if (editMode && editSection === 'dispatch') {
        // 편집 모드에서는 기존 branchDispatchQuantities가 있으면 사용, 없으면 branchRequirements로 초기화
        console.log('편집 모드 - dispatch 섹션 초기화:', {
          branchDispatchQuantities: request.branchDispatchQuantities,
          branchRequirements: request.branchRequirements,
          currentStatus: request.currentStatus
        });
        
        if (request.branchDispatchQuantities && request.branchDispatchQuantities.length > 0) {
          setBranchDispatchQuantities(request.branchDispatchQuantities);
        } else if (request.branchRequirements && request.branchRequirements.length > 0) {
          const initialDispatchQuantities = request.branchRequirements.map(req => ({
            branchId: req.branchId,
            branchName: req.branchName,
            requiredQuantity: Number(req.requestedQuantity),
            dispatchedQuantity: Number(req.requestedQuantity),
            confirmedQuantity: undefined,
            branchReceiptMemo: '',
          }));
          console.log('편집 모드 - 초기화된 지점별 수량:', initialDispatchQuantities);
          setBranchDispatchQuantities(initialDispatchQuantities);
        } else {
          // branchRequirements가 없는 경우 기본 지점 생성
          console.warn('⚠️ branchRequirements가 없어 기본 지점을 생성합니다.');
          const fallbackDispatchQuantities = [
            {
              branchId: 'fallback-1',
              branchName: '기본 지점',
              requiredQuantity: request.totalRequestedQuantity - (request.logisticsStockQuantity || 0),
              dispatchedQuantity: request.totalRequestedQuantity - (request.logisticsStockQuantity || 0),
              confirmedQuantity: undefined,
              branchReceiptMemo: '',
            }
          ];
          setBranchDispatchQuantities(fallbackDispatchQuantities);
        }
      } else if (!editMode && (request.currentStatus === 'warehouse_received' || request.currentStatus === 'partial_dispatched')) {
        // 일반 모드에서 지점 출고 처리할 때 (warehouse_received 또는 partial_dispatched 상태)
        console.log('일반 모드 - 지점 출고 상태 초기화:', {
          currentStatus: request.currentStatus,
          branchDispatchQuantities: request.branchDispatchQuantities,
          branchRequirements: request.branchRequirements
        });
        
        // partial_dispatched 상태에서는 기존 dispatchMemo도 복원
        if (request.currentStatus === 'partial_dispatched' && request.dispatchMemo) {
          setDispatchMemo(request.dispatchMemo);
        }
        
        if (request.branchDispatchQuantities && request.branchDispatchQuantities.length > 0) {
          // partial_dispatched 상태에서는 기존 branchDispatchQuantities 사용
          console.log('기존 부분출고 데이터 복원:', request.branchDispatchQuantities);
          setBranchDispatchQuantities(request.branchDispatchQuantities);
        } else if (request.branchRequirements && request.branchRequirements.length > 0) {
          // warehouse_received 상태에서는 branchRequirements로 초기화
          const initialDispatchQuantities = request.branchRequirements.map(req => ({
            branchId: req.branchId,
            branchName: req.branchName,
            requiredQuantity: Number(req.requestedQuantity),
            dispatchedQuantity: Number(req.requestedQuantity),
            confirmedQuantity: undefined,
            branchReceiptMemo: '',
          }));
          console.log('일반 모드 - 초기화된 지점별 수량:', initialDispatchQuantities);
          setBranchDispatchQuantities(initialDispatchQuantities);
        } else {
          // branchRequirements가 없는 경우 기본 지점 생성
          console.warn('⚠️ branchRequirements가 없어 기본 지점을 생성합니다.');
          const fallbackDispatchQuantities = [
            {
              branchId: 'fallback-1',
              branchName: '기본 지점',
              requiredQuantity: request.totalRequestedQuantity - (request.logisticsStockQuantity || 0),
              dispatchedQuantity: request.totalRequestedQuantity - (request.logisticsStockQuantity || 0),
              confirmedQuantity: undefined,
              branchReceiptMemo: '',
            }
          ];
          setBranchDispatchQuantities(fallbackDispatchQuantities);
        }
      }

      // 지점별 수령 확인 초기화
      if (request.currentStatus === 'branch_dispatched' && request.branchDispatchQuantities) {
        setBranchReceiptQuantities(request.branchDispatchQuantities.map(item => ({
          ...item,
          confirmedQuantity: item.dispatchedQuantity, // 기본값은 출고 수량과 동일
        })));
      }
    }
  }, [request, editMode, editSection]);

  // Phase 2: 상태별 처리 함수들
  const handleEcountRegistration = async () => {
    if (!request) {
      setError('요청 정보가 없습니다.');
      return;
    }

    // 품목그룹 필수 검증
    if (!itemGroup1.trim() || !itemGroup2.trim() || !itemGroup3.trim()) {
      setError('품목그룹 1, 2, 3은 모두 필수 입력 항목입니다.');
      return;
    }

    try {
      setProcessing(true);
      setError('');

      const requestRef = doc(db, 'purchaseRequests', request.id);
      
      const newHistoryEntry = {
        status: 'ecount_registered',
        updatedAt: Timestamp.now(),
        updatedByUid: userProfile?.id || '',
        updatedByName: userProfile?.name || '',
        comments: comment.trim() || '이카운트 등록 완료',
      };

      await updateDoc(requestRef, {
        currentStatus: 'ecount_registered',
        currentResponsibleTeam: 'logistics',
        ecountRegisteredAt: Timestamp.now(),
        ecountRegistrarUid: userProfile?.id || '',
        itemGroup1: itemGroup1.trim(),
        itemGroup2: itemGroup2.trim(),
        itemGroup3: itemGroup3.trim(),
        statusHistory: arrayUnion(newHistoryEntry),
        updatedAt: Timestamp.now(),
      });

      setComment('');
      setItemGroup1('');
      setItemGroup2('');
      setItemGroup3('');
      onUpdate();
      onClose();
      
    } catch (error) {
      console.error('이카운트 등록 처리 실패:', error);
      setError('이카운트 등록 처리에 실패했습니다. 다시 시도해주세요.');
    } finally {
      setProcessing(false);
    }
  };

  // 편집 모드용: 이카운트 등록 정보 수정
  const handleEcountUpdate = async () => {
    if (!request) {
      setError('요청 정보가 없습니다.');
      return;
    }

    // 품목그룹 필수 검증
    if (!itemGroup1.trim() || !itemGroup2.trim() || !itemGroup3.trim()) {
      setError('품목그룹 1, 2, 3은 모두 필수 입력 항목입니다.');
      return;
    }

    try {
      setProcessing(true);
      setError('');

      const requestRef = doc(db, 'purchaseRequests', request.id);
      
      const updateHistoryEntry = {
        status: 'ecount_updated',
        updatedAt: Timestamp.now(),
        updatedByUid: userProfile?.id || '',
        updatedByName: userProfile?.name || '',
        comments: comment.trim() ? `이카운트 등록 정보 수정: ${comment}` : '이카운트 등록 정보 수정',
      };

      await updateDoc(requestRef, {
        ecountRegistrarUid: userProfile?.id || '',
        itemGroup1: itemGroup1.trim(),
        itemGroup2: itemGroup2.trim(),
        itemGroup3: itemGroup3.trim(),
        statusHistory: arrayUnion(updateHistoryEntry),
        updatedAt: Timestamp.now(),
      });

      setComment('');
      setItemGroup1('');
      setItemGroup2('');
      setItemGroup3('');
      onUpdate();
      onClose();
      
    } catch (error) {
      console.error('이카운트 등록 정보 수정 실패:', error);
      setError('이카운트 등록 정보 수정에 실패했습니다. 다시 시도해주세요.');
    } finally {
      setProcessing(false);
    }
  };

  const handlePOCompletion = async () => {
    if (!request || !expectedDeliveryDate || expectedDeliveryQuantity <= 0 || !comment.trim()) {
      setError('입고 예정일, 입고 예정 수량, 코멘트를 모두 입력해주세요.');
      return;
    }

    try {
      setProcessing(true);
      setError('');

      const requestRef = doc(db, 'purchaseRequests', request.id);
      
      const newHistoryEntry = {
        status: 'po_completed',
        updatedAt: Timestamp.now(),
        updatedByUid: userProfile?.id || '',
        updatedByName: userProfile?.name || '',
        comments: comment,
      };

      await updateDoc(requestRef, {
        currentStatus: 'po_completed',
        currentResponsibleTeam: 'logistics',
        poCompletedAt: Timestamp.now(),
        poCompleterUid: userProfile?.id || '',
        expectedDeliveryDate: Timestamp.fromDate(expectedDeliveryDate),
        expectedDeliveryQuantity: expectedDeliveryQuantity,
        actualSupplier: actualSupplier || request.initialSupplier,
        poMemo: poMemo,
        statusHistory: arrayUnion(newHistoryEntry),
        updatedAt: Timestamp.now(),
      });

      setComment('');
      setActualSupplier('');
      setPoMemo('');
      onUpdate();
      onClose();
      
    } catch (error) {
      console.error('발주 완료 처리 실패:', error);
      setError('발주 완료 처리에 실패했습니다. 다시 시도해주세요.');
    } finally {
      setProcessing(false);
    }
  };

  const handleWarehouseReceipt = async () => {
    if (!request || !actualReceiptDate || actualReceivedQuantity <= 0 || !comment.trim()) {
      setError('실제 입고일, 실제 입고 수량, 코멘트를 모두 입력해주세요.');
      return;
    }

    try {
      setProcessing(true);
      setError('');

      const requestRef = doc(db, 'purchaseRequests', request.id);
      
      const newHistoryEntry = {
        status: 'warehouse_received',
        updatedAt: Timestamp.now(),
        updatedByUid: userProfile?.id || '',
        updatedByName: userProfile?.name || '',
        comments: comment,
      };

      await updateDoc(requestRef, {
        currentStatus: 'warehouse_received',
        currentResponsibleTeam: 'logistics',
        warehouseReceiptAt: Timestamp.fromDate(actualReceiptDate),
        warehouseReceiptUid: userProfile?.id || '',
        actualReceivedQuantity: actualReceivedQuantity,
        warehouseReceiptMemo: warehouseReceiptMemo,
        statusHistory: arrayUnion(newHistoryEntry),
        updatedAt: Timestamp.now(),
      });

      setComment('');
      setWarehouseReceiptMemo('');
      onUpdate();
      onClose();
      
    } catch (error) {
      console.error('입고 완료 처리 실패:', error);
      setError('입고 완료 처리에 실패했습니다. 다시 시도해주세요.');
    } finally {
      setProcessing(false);
    }
  };

  const handleBranchDispatch = async () => {
    if (!request) {
      setError('요청 정보가 없습니다.');
      return;
    }

    // 총 출고 수량 검증
    const totalDispatchedQuantity = branchDispatchQuantities.reduce((sum, item) => sum + item.dispatchedQuantity, 0);
    const availableQuantity = request.actualReceivedQuantity || 0;

    if (totalDispatchedQuantity > availableQuantity) {
      setError(`창고 보유 수량(${availableQuantity}개)을 초과하여 출고할 수 없습니다. (현재 출고 계획: ${totalDispatchedQuantity}개)`);
      return;
    }

    try {
      setProcessing(true);
      setError('');

      const requestRef = doc(db, 'purchaseRequests', request.id);
      
      const newHistoryEntry = {
        status: 'branch_dispatched',
        updatedAt: Timestamp.now(),
        updatedByUid: userProfile?.id || '',
        updatedByName: userProfile?.name || '',
        comments: comment.trim() || '지점 출고 완료',
      };

      const updateData = removeUndefinedValues({
        currentStatus: 'branch_dispatched',
        currentResponsibleTeam: 'operations',
        branchDispatchCompletedAt: Timestamp.now(),
        branchDispatchCompleterUid: userProfile?.id || '',
        branchDispatchQuantities: branchDispatchQuantities.map(branch => removeUndefinedValues(branch)),
        dispatchMemo: dispatchMemo,
        statusHistory: arrayUnion(newHistoryEntry),
        updatedAt: Timestamp.now(),
      });

      await updateDoc(requestRef, updateData);

      setComment('');
      setDispatchMemo('');
      onUpdate();
      onClose();
      
    } catch (error) {
      console.error('지점 출고 처리 실패:', error);
      setError('지점 출고 처리에 실패했습니다. 다시 시도해주세요.');
    } finally {
      setProcessing(false);
    }
  };

  const handleBranchReceiptConfirmation = async () => {
    if (!request || !comment.trim()) {
      setError('코멘트를 입력해주세요.');
      return;
    }

    try {
      setProcessing(true);
      setError('');

      const requestRef = doc(db, 'purchaseRequests', request.id);
      
      const newHistoryEntry = {
        status: 'branch_received_confirmed',
        updatedAt: Timestamp.now(),
        updatedByUid: userProfile?.id || '',
        updatedByName: userProfile?.name || '',
        comments: comment,
      };

      await updateDoc(requestRef, {
        currentStatus: 'branch_received_confirmed',
        currentResponsibleTeam: 'completed',
        branchReceiptConfirmedAt: Timestamp.now(),
        branchReceiptConfirmerUid: userProfile?.id || '',
        branchDispatchQuantities: branchReceiptQuantities,
        statusHistory: arrayUnion(newHistoryEntry),
        updatedAt: Timestamp.now(),
      });

      setComment('');
      onUpdate();
      onClose();
      
    } catch (error) {
      console.error('지점 입고 확인 처리 실패:', error);
      setError('지점 입고 확인 처리에 실패했습니다. 다시 시도해주세요.');
    } finally {
      setProcessing(false);
    }
  };

  // 지점별 출고 수량 변경 핸들러
  const handleBranchDispatchQuantityChange = (index: number, quantity: number) => {
    const updated = [...branchDispatchQuantities];
    updated[index] = { ...updated[index], dispatchedQuantity: quantity };
    setBranchDispatchQuantities(updated);
  };

  // 지점별 수령 수량 변경 핸들러
  const handleBranchReceiptQuantityChange = (index: number, quantity: number) => {
    const updated = [...branchReceiptQuantities];
    updated[index] = { ...updated[index], confirmedQuantity: quantity };
    setBranchReceiptQuantities(updated);
  };

  // 지점별 수령 메모 변경 핸들러
  const handleBranchReceiptMemoChange = (index: number, memo: string) => {
    const updated = [...branchReceiptQuantities];
    updated[index] = { ...updated[index], branchReceiptMemo: memo };
    setBranchReceiptQuantities(updated);
  };

  // 상태 라벨 매핑 (Phase 2 확장)
  const getStatusLabel = (status: string) => {
    switch (status) {
      case 'operations_submitted': return '운영부 요청 완료';
      case 'ecount_registered': return '이카운트 등록 완료';
      case 'po_completed': return '구매처 발주 완료';
      case 'warehouse_received': return '물류창고 입고 완료';
      case 'partial_dispatched': return '부분 출고 완료';
      case 'branch_dispatched': return '전체 지점 출고 완료';
      case 'branch_received_confirmed': return '지점 입고 확인 (완료)';
      default: return status;
    }
  };

  // 상태 색상 매핑 (Phase 2 확장)
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'operations_submitted': return 'info';
      case 'ecount_registered': return 'primary';
      case 'po_completed': return 'warning';
      case 'warehouse_received': return 'secondary';
      case 'partial_dispatched': return 'warning';
      case 'branch_dispatched': return 'default';
      case 'branch_received_confirmed': return 'success';
      default: return 'default';
    }
  };

  // 중요도 라벨 매핑
  const getImportanceLabel = (importance: string) => {
    switch (importance) {
      case 'low': return '낮음';
      case 'medium': return '보통';
      case 'high': return '높음';
      case 'urgent': return '긴급';
      default: return importance;
    }
  };

  // 중요도 색상 매핑
  const getImportanceColor = (importance: string) => {
    switch (importance) {
      case 'low': return 'default';
      case 'medium': return 'info';
      case 'high': return 'warning';
      case 'urgent': return 'error';
      default: return 'default';
    }
  };

  // 편집 모드용: 구매처 발주 정보 수정
  const handlePOUpdate = async () => {
    if (!request || !expectedDeliveryDate || expectedDeliveryQuantity <= 0 || !comment.trim()) {
      setError('입고 예정일, 입고 예정 수량, 수정 사유를 모두 입력해주세요.');
      return;
    }

    try {
      setProcessing(true);
      setError('');

      const requestRef = doc(db, 'purchaseRequests', request.id);
      
      const updateHistoryEntry = {
        status: 'po_updated',
        updatedAt: Timestamp.now(),
        updatedByUid: userProfile?.id || '',
        updatedByName: userProfile?.name || '',
        comments: `구매처 발주 정보 수정: ${comment}`,
      };

      await updateDoc(requestRef, {
        expectedDeliveryDate: Timestamp.fromDate(expectedDeliveryDate),
        expectedDeliveryQuantity: expectedDeliveryQuantity,
        actualSupplier: actualSupplier || request.initialSupplier,
        poMemo: poMemo,
        poCompleterUid: userProfile?.id || '',
        statusHistory: arrayUnion(updateHistoryEntry),
        updatedAt: Timestamp.now(),
      });

      setComment('');
      setActualSupplier('');
      setPoMemo('');
      onUpdate();
      onClose();
      
    } catch (error) {
      console.error('구매처 발주 정보 수정 실패:', error);
      setError('구매처 발주 정보 수정에 실패했습니다. 다시 시도해주세요.');
    } finally {
      setProcessing(false);
    }
  };

  // 편집 모드용: 물류창고 입고 정보 수정
  const handleWarehouseUpdate = async () => {
    if (!request || !actualReceiptDate || actualReceivedQuantity <= 0 || !comment.trim()) {
      setError('실제 입고일, 실제 입고 수량, 수정 사유를 모두 입력해주세요.');
      return;
    }

    try {
      setProcessing(true);
      setError('');

      const requestRef = doc(db, 'purchaseRequests', request.id);
      
      const updateHistoryEntry = {
        status: 'warehouse_updated',
        updatedAt: Timestamp.now(),
        updatedByUid: userProfile?.id || '',
        updatedByName: userProfile?.name || '',
        comments: `물류창고 입고 정보 수정: ${comment}`,
      };

      await updateDoc(requestRef, {
        warehouseReceiptAt: Timestamp.fromDate(actualReceiptDate),
        actualReceivedQuantity: actualReceivedQuantity,
        warehouseReceiptMemo: warehouseReceiptMemo,
        warehouseReceiptUid: userProfile?.id || '',
        statusHistory: arrayUnion(updateHistoryEntry),
        updatedAt: Timestamp.now(),
      });

      setComment('');
      setWarehouseReceiptMemo('');
      onUpdate();
      onClose();
      
    } catch (error) {
      console.error('물류창고 입고 정보 수정 실패:', error);
      setError('물류창고 입고 정보 수정에 실패했습니다. 다시 시도해주세요.');
    } finally {
      setProcessing(false);
    }
  };

  // 편집 모드용: 지점 출고 정보 수정
  const handleDispatchUpdate = async () => {
    if (!request) {
      setError('요청 정보가 없습니다.');
      return;
    }

    // 총 출고 수량 검증
    const totalDispatchedQuantity = branchDispatchQuantities.reduce((sum, item) => sum + item.dispatchedQuantity, 0);
    const availableQuantity = request.actualReceivedQuantity || 0;

    if (totalDispatchedQuantity > availableQuantity) {
      setError(`창고 보유 수량(${availableQuantity}개)을 초과하여 출고할 수 없습니다. (현재 출고 계획: ${totalDispatchedQuantity}개)`);
      return;
    }

    try {
      setProcessing(true);
      setError('');

      const requestRef = doc(db, 'purchaseRequests', request.id);
      
      const updateHistoryEntry = {
        status: 'dispatch_updated',
        updatedAt: Timestamp.now(),
        updatedByUid: userProfile?.id || '',
        updatedByName: userProfile?.name || '',
        comments: comment.trim() ? `지점 출고 정보 수정: ${comment}` : '지점 출고 정보 수정',
      };

      const updateData = removeUndefinedValues({
        branchDispatchQuantities: branchDispatchQuantities.map(branch => removeUndefinedValues(branch)),
        dispatchMemo: dispatchMemo,
        branchDispatchCompleterUid: userProfile?.id || '',
        statusHistory: arrayUnion(updateHistoryEntry),
        updatedAt: Timestamp.now(),
      });

      await updateDoc(requestRef, updateData);

      setComment('');
      setDispatchMemo('');
      onUpdate();
      onClose();
      
    } catch (error) {
      console.error('지점 출고 정보 수정 실패:', error);
      setError('지점 출고 정보 수정에 실패했습니다. 다시 시도해주세요.');
    } finally {
      setProcessing(false);
    }
  };

  // 편집 모드용: 지점 입고 확인 정보 수정
  const handleReceiptUpdate = async () => {
    if (!request || !comment.trim()) {
      setError('수정 사유를 입력해주세요.');
      return;
    }

    try {
      setProcessing(true);
      setError('');

      const requestRef = doc(db, 'purchaseRequests', request.id);
      
      const updateHistoryEntry = {
        status: 'receipt_updated',
        updatedAt: Timestamp.now(),
        updatedByUid: userProfile?.id || '',
        updatedByName: userProfile?.name || '',
        comments: `지점 입고 확인 정보 수정: ${comment}`,
      };

      await updateDoc(requestRef, {
        branchDispatchQuantities: branchReceiptQuantities,
        branchReceiptConfirmerUid: userProfile?.id || '',
        statusHistory: arrayUnion(updateHistoryEntry),
        updatedAt: Timestamp.now(),
      });

      setComment('');
      onUpdate();
      onClose();
      
    } catch (error) {
      console.error('지점 입고 확인 정보 수정 실패:', error);
      setError('지점 입고 확인 정보 수정에 실패했습니다. 다시 시도해주세요.');
    } finally {
      setProcessing(false);
    }
  };

  // 지점별 개별 출고 완료 처리 (로컬 상태만 업데이트, DB 저장하지 않음)
  const handleIndividualBranchDispatch = async (branchIndex: number) => {
    if (!request) {
      setError('요청 정보가 없습니다.');
      return;
    }

    // 로컬 상태만 업데이트 (DB 저장은 하지 않음)
    const updatedBranchDispatchQuantities = [...branchDispatchQuantities];
    const targetBranch = updatedBranchDispatchQuantities[branchIndex];
    
    updatedBranchDispatchQuantities[branchIndex] = {
      ...targetBranch,
      actualDispatchedQuantity: targetBranch.dispatchedQuantity,
      isDispatched: true,
      dispatchedAt: new Date(),
      dispatchedByUid: userProfile?.id || '',
    };

    setBranchDispatchQuantities(updatedBranchDispatchQuantities);
    
    // ✅ 창을 닫지 않고 로컬 상태만 업데이트
    // 사용자가 하단 버튼으로 명시적 저장 필요
  };

  // 지점별 출고 완료 취소 (로컬 상태만 변경)
  const handleUndoBranchDispatch = (branchIndex: number) => {
    const updatedBranchDispatchQuantities = [...branchDispatchQuantities];
    const targetBranch = updatedBranchDispatchQuantities[branchIndex];
    
    updatedBranchDispatchQuantities[branchIndex] = {
      ...targetBranch,
      actualDispatchedQuantity: undefined,
      isDispatched: false,
      dispatchedAt: undefined,
      dispatchedByUid: undefined,
    };

    setBranchDispatchQuantities(updatedBranchDispatchQuantities);
  };

  // 지점별 출고 수량 편집 모드 토글
  const handleToggleEditBranch = (branchIndex: number) => {
    setEditingBranchIndex(editingBranchIndex === branchIndex ? null : branchIndex);
  };

  // 편집 모드에서 수량 변경 확정
  const handleConfirmEditBranch = (branchIndex: number) => {
    setEditingBranchIndex(null);
    
    // 편집된 수량으로 다시 출고 완료 처리
    const updatedBranchDispatchQuantities = [...branchDispatchQuantities];
    const targetBranch = updatedBranchDispatchQuantities[branchIndex];
    
    updatedBranchDispatchQuantities[branchIndex] = {
      ...targetBranch,
      actualDispatchedQuantity: targetBranch.dispatchedQuantity,
      isDispatched: true,
      dispatchedAt: new Date(),
      dispatchedByUid: userProfile?.id || '',
    };

    setBranchDispatchQuantities(updatedBranchDispatchQuantities);
  };

  // 현재 로컬 상태를 DB에 저장 (창 닫지 않음)
  const handleSaveCurrentState = async () => {
    if (!request) {
      setError('요청 정보가 없습니다.');
      return;
    }

    try {
      setProcessing(true);
      setError('');

      const requestRef = doc(db, 'purchaseRequests', request.id);
      
      // 현재 출고 상황 분석
      const dispatchedBranches = branchDispatchQuantities.filter(branch => branch.isDispatched);
      const allDispatched = dispatchedBranches.length === branchDispatchQuantities.length && branchDispatchQuantities.length > 0;
      const totalDispatchedQuantity = dispatchedBranches.reduce((sum, branch) => sum + branch.dispatchedQuantity, 0);
      
      const newHistoryEntry = {
        status: allDispatched ? 'branch_dispatched' : 'partial_dispatched',
        updatedAt: Timestamp.now(),
        updatedByUid: userProfile?.id || '',
        updatedByName: userProfile?.name || '',
        comments: comment.trim() || `${allDispatched ? '전체' : '부분'} 출고 저장 - ${dispatchedBranches.length}개 지점 (총 ${totalDispatchedQuantity}개)`,
      };

      const updateData: any = {
        branchDispatchQuantities: branchDispatchQuantities,
        dispatchMemo: dispatchMemo,
        statusHistory: arrayUnion(newHistoryEntry),
        updatedAt: Timestamp.now(),
      };

      // 상태 업데이트
      if (allDispatched) {
        updateData.currentStatus = 'branch_dispatched';
        updateData.currentResponsibleTeam = 'operations';
        updateData.branchDispatchCompletedAt = Timestamp.now();
        updateData.branchDispatchCompleterUid = userProfile?.id || '';
      } else if (request.currentStatus === 'warehouse_received') {
        updateData.currentStatus = 'partial_dispatched';
        updateData.currentResponsibleTeam = 'logistics';
      }

      await updateDoc(requestRef, updateData);

      setComment('');
      onUpdate();
      
      // ✅ 창을 닫지 않고 저장만 완료
      
    } catch (error) {
      console.error('현재 상태 저장 실패:', error);
      setError('현재 상태 저장에 실패했습니다. 다시 시도해주세요.');
    } finally {
      setProcessing(false);
    }
  };

  // Firestore에 저장할 때 undefined 값 제거하는 도우미 함수
  const removeUndefinedValues = (obj: any): any => {
    const cleaned: any = {};
    Object.keys(obj).forEach(key => {
      if (obj[key] !== undefined) {
        if (typeof obj[key] === 'object' && obj[key] !== null && !Array.isArray(obj[key]) && !(obj[key] instanceof Date)) {
          const nestedCleaned = removeUndefinedValues(obj[key]);
          if (Object.keys(nestedCleaned).length > 0) {
            cleaned[key] = nestedCleaned;
          }
        } else if (Array.isArray(obj[key])) {
          cleaned[key] = obj[key].map((item: any) => 
            typeof item === 'object' && item !== null ? removeUndefinedValues(item) : item
          );
        } else {
          cleaned[key] = obj[key];
        }
      }
    });
    return cleaned;
  };

  // 부분 출고 상태 저장 (일부 지점만 출고된 경우)
  const handlePartialDispatchSave = async () => {
    console.log('🚀 부분 출고 저장 시작');
    
    if (!request) {
      console.error('❌ request가 없습니다.');
      setError('요청 정보가 없습니다.');
      return;
    }

    console.log('📊 현재 상태:', {
      request: request.id,
      branchDispatchQuantities,
      comment: comment.trim(),
      dispatchMemo
    });

    try {
      setProcessing(true);
      setError('');

      const requestRef = doc(db, 'purchaseRequests', request.id);
      
      // 현재 출고된 지점들의 정보 업데이트 (undefined 제거)
      const cleanedBranchDispatchQuantities = branchDispatchQuantities.map(branch => 
        removeUndefinedValues({
          ...branch,
          actualDispatchedQuantity: branch.isDispatched ? branch.dispatchedQuantity : 0,
          dispatchedAt: branch.isDispatched ? (branch.dispatchedAt || new Date()) : undefined,
          dispatchedByUid: branch.isDispatched ? (branch.dispatchedByUid || userProfile?.id || '') : undefined,
        })
      );

      const dispatchedCount = cleanedBranchDispatchQuantities.filter(branch => branch.isDispatched).length;
      const totalDispatchedQuantity = cleanedBranchDispatchQuantities
        .filter(branch => branch.isDispatched)
        .reduce((sum, branch) => sum + branch.dispatchedQuantity, 0);
      
      console.log('💾 저장할 데이터:', {
        dispatchedCount,
        totalDispatchedQuantity,
        cleanedBranchDispatchQuantities
      });
      
      const newHistoryEntry = {
        status: 'partial_dispatched',
        updatedAt: Timestamp.now(),
        updatedByUid: userProfile?.id || '',
        updatedByName: userProfile?.name || '',
        comments: comment.trim() || `일부 출고 완료 (${dispatchedCount}개 지점, 총 ${totalDispatchedQuantity}개)`,
      };

      const updateData = removeUndefinedValues({
        currentStatus: 'partial_dispatched',
        currentResponsibleTeam: 'logistics',
        branchDispatchQuantities: cleanedBranchDispatchQuantities,
        dispatchMemo: dispatchMemo,
        statusHistory: arrayUnion(newHistoryEntry),
        updatedAt: Timestamp.now(),
      });

      console.log('🔥 Firestore 업데이트 데이터:', updateData);

      await updateDoc(requestRef, updateData);

      console.log('✅ Firestore 업데이트 성공');

      setComment('');
      setDispatchMemo('');
      onUpdate();
      onClose();
      
    } catch (error) {
      console.error('❌ 부분 출고 저장 실패:', error);
      setError('부분 출고 저장에 실패했습니다. 다시 시도해주세요.');
    } finally {
      setProcessing(false);
    }
  };

  if (!request) return null;

  // 권한 체크: 물류팀이나 관리자만 상태 변경 가능
  const canChangeStatus = userProfile?.role === 'logistics' || userProfile?.role === 'admin';
  const canConfirmReceipt = userProfile?.role === 'operations' || userProfile?.role === 'admin';

  // 편집 섹션 제목 매핑
  const getEditSectionTitle = (section: string) => {
    switch (section) {
      case 'ecount': return '이카운트 등록 수정';
      case 'po': return '구매처 발주 수정';
      case 'warehouse': return '물류창고 입고 수정';
      case 'dispatch': return '지점 출고 수정';
      case 'receipt': return '지점 입고 확인 수정';
      default: return '상태 수정';
    }
  };

  return (
    <LocalizationProvider dateAdapter={AdapterDateFns}>
      <Dialog open={open} onClose={onClose} maxWidth="lg" fullWidth>
        <DialogTitle>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <Typography variant="h6">
              {editMode && editSection 
                ? `${getEditSectionTitle(editSection)} - ${request?.requestId}`
                : `구매 요청 상세 정보 - ${request?.requestId}`
              }
            </Typography>
            <IconButton onClick={onClose}>
              <CloseIcon />
            </IconButton>
          </Box>
        </DialogTitle>

        <DialogContent>
          {error && (
            <Alert severity="error" sx={{ mb: 2 }} onClose={() => setError('')}>
              {error}
            </Alert>
          )}

          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
            {/* 편집 모드일 때 요약 정보 표시 */}
            {editMode && (
              <Card>
                <CardContent>
                  <Typography variant="h6" gutterBottom>
                    📋 요청 정보 요약
                  </Typography>
                  <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: 2 }}>
                    <Box>
                      <Typography variant="body2" color="text.secondary">요청 ID</Typography>
                      <Typography variant="body1" fontWeight="medium">{request.requestId}</Typography>
                    </Box>
                    <Box>
                      <Typography variant="body2" color="text.secondary">부품명</Typography>
                      <Typography variant="body1">{request.requestedPartName}</Typography>
                    </Box>
                    <Box>
                      <Typography variant="body2" color="text.secondary">총 요청수량</Typography>
                      <Typography variant="h6" color="primary">{request.totalRequestedQuantity.toLocaleString()}개</Typography>
                    </Box>
                  </Box>
                </CardContent>
              </Card>
            )}

            {/* 편집 모드가 아닐 때만 기본 정보들 표시 */}
            {!editMode && (
              <>
                {/* 기본 정보 */}
                <Card>
                  <CardContent>
                    <Typography variant="h6" gutterBottom>
                      📋 요청 기본 정보
                    </Typography>
                    <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 2 }}>
                      <Box>
                        <Typography variant="body2" color="text.secondary">요청 ID</Typography>
                        <Typography variant="body1" fontWeight="medium">{request.requestId}</Typography>
                      </Box>
                      <Box>
                        <Typography variant="body2" color="text.secondary">요청일</Typography>
                        <Typography variant="body1">{request.requestDate.toLocaleDateString('ko-KR')}</Typography>
                      </Box>
                      <Box>
                        <Typography variant="body2" color="text.secondary">요청자</Typography>
                        <Typography variant="body1">{request.requestorName}</Typography>
                      </Box>
                      <Box>
                        <Typography variant="body2" color="text.secondary">중요도</Typography>
                        <Chip
                          label={getImportanceLabel(request.importance)}
                          color={getImportanceColor(request.importance) as any}
                          size="small"
                        />
                      </Box>
                      <Box>
                        <Typography variant="body2" color="text.secondary">현재 상태</Typography>
                        <Chip
                          label={getStatusLabel(request.currentStatus)}
                          color={getStatusColor(request.currentStatus) as any}
                          size="small"
                        />
                      </Box>
                      <Box>
                        <Typography variant="body2" color="text.secondary">총 요청수량</Typography>
                        <Typography variant="h6" color="primary">{request.totalRequestedQuantity.toLocaleString()}개</Typography>
                      </Box>
                    </Box>
                    
                    {/* 기존 요청 메모가 있다면 표시 */}
                    {request.notes && (
                      <Box sx={{ mt: 3 }}>
                        <Typography variant="body2" color="text.secondary" gutterBottom>
                          요청 메모
                        </Typography>
                        <Typography variant="body1" sx={{ p: 2, bgcolor: 'grey.50', borderRadius: 1 }}>
                          {request.notes}
                        </Typography>
                      </Box>
                    )}
                  </CardContent>
                </Card>

                {/* 부품 정보 */}
                <Card>
                  <CardHeader
                    title="🔧 부품 정보"
                    action={
                      <IconButton
                        onClick={() => toggleSection('partInfo')}
                        sx={{ transform: expandedSections.partInfo ? 'rotate(180deg)' : 'rotate(0deg)', transition: 'transform 0.3s' }}
                      >
                        <ExpandMoreIcon />
                      </IconButton>
                    }
                    sx={{ pb: 1 }}
                  />
                  <Collapse in={expandedSections.partInfo}>
                    <CardContent sx={{ pt: 0 }}>
                      <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 2 }}>
                        <Box>
                          <Typography variant="body2" color="text.secondary">부품번호</Typography>
                          <Typography variant="body1" fontWeight="medium">{request.requestedPartNumber}</Typography>
                        </Box>
                        <Box>
                          <Typography variant="body2" color="text.secondary">부품명</Typography>
                          <Typography variant="body1" fontWeight="medium">{request.requestedPartName}</Typography>
                        </Box>
                        <Box>
                          <Typography variant="body2" color="text.secondary">판매가</Typography>
                          <Typography variant="body1" fontWeight="medium" color="success.main">
                            {request.price ? `${request.price.toLocaleString()}원` : '미입력'}
                          </Typography>
                        </Box>
                        <Box>
                          <Typography variant="body2" color="text.secondary">품목그룹 1</Typography>
                          <Typography variant="body1">
                            {request.itemGroup1 || '미입력'}
                          </Typography>
                        </Box>
                        <Box>
                          <Typography variant="body2" color="text.secondary">품목그룹 2</Typography>
                          <Typography variant="body1">
                            {request.itemGroup2 || '미입력'}
                          </Typography>
                        </Box>
                        <Box>
                          <Typography variant="body2" color="text.secondary">품목그룹 3</Typography>
                          <Typography variant="body1">
                            {request.itemGroup3 || '미입력'}
                          </Typography>
                        </Box>
                        <Box sx={{ gridColumn: '1 / -1' }}>
                          <Typography variant="body2" color="text.secondary">추천 구매처</Typography>
                          <Typography variant="body1">{request.initialSupplier || '미지정'}</Typography>
                        </Box>
                        {request.actualSupplier && (
                          <Box sx={{ gridColumn: '1 / -1' }}>
                            <Typography variant="body2" color="text.secondary">실제 발주처</Typography>
                            <Typography variant="body1" fontWeight="medium">{request.actualSupplier}</Typography>
                          </Box>
                        )}
                      </Box>
                    </CardContent>
                  </Collapse>
                </Card>

                {/* 지점별 요청수량 */}
                {/* 지점 출고 처리 화면이 아닐 때만 상세 테이블 표시 */}
                {!((!editMode && canChangeStatus && (request.currentStatus === 'warehouse_received' || request.currentStatus === 'partial_dispatched')) ||
                  (editMode && editSection === 'dispatch')) ? (
                  <Card>
                    <CardHeader
                      title="🏪 지점별 요청수량"
                      action={
                        <IconButton
                          onClick={() => toggleSection('branchInfo')}
                          sx={{ transform: expandedSections.branchInfo ? 'rotate(180deg)' : 'rotate(0deg)', transition: 'transform 0.3s' }}
                        >
                          <ExpandMoreIcon />
                        </IconButton>
                      }
                      sx={{ pb: 1 }}
                    />
                    <Collapse in={expandedSections.branchInfo}>
                      <CardContent sx={{ pt: 0 }}>
                        <TableContainer component={Paper} variant="outlined">
                          <Table size="small">
                            <TableHead>
                              <TableRow>
                                <TableCell>지점명</TableCell>
                                <TableCell>요청수량</TableCell>
                                {request.branchDispatchQuantities && (
                                  <>
                                    <TableCell>출고수량</TableCell>
                                    {request.branchDispatchQuantities.some(item => item.confirmedQuantity !== undefined) && (
                                      <TableCell>수령수량</TableCell>
                                    )}
                                  </>
                                )}
                              </TableRow>
                            </TableHead>
                            <TableBody>
                              {request.branchRequirements.map((req, index) => {
                                const dispatchInfo = request.branchDispatchQuantities?.find(
                                  item => item.branchId === req.branchId
                                );
                                return (
                                  <TableRow key={index}>
                                    <TableCell>{req.branchName}</TableCell>
                                    <TableCell>{Number(req.requestedQuantity).toLocaleString()}개</TableCell>
                                    {request.branchDispatchQuantities && (
                                      <>
                                        <TableCell>
                                          {dispatchInfo?.dispatchedQuantity?.toLocaleString() || '0'}개
                                        </TableCell>
                                        {request.branchDispatchQuantities.some(item => item.confirmedQuantity !== undefined) && (
                                          <TableCell>
                                            {dispatchInfo?.confirmedQuantity?.toLocaleString() || '0'}개
                                          </TableCell>
                                        )}
                                      </>
                                    )}
                                  </TableRow>
                                );
                              })}
                              <TableRow>
                                <TableCell sx={{ fontWeight: 'bold' }}>물류 적정재고</TableCell>
                                <TableCell sx={{ fontWeight: 'bold' }}>
                                  {request.logisticsStockQuantity.toLocaleString()}개
                                </TableCell>
                                {request.branchDispatchQuantities && (
                                  <>
                                    <TableCell sx={{ fontWeight: 'bold' }}>-</TableCell>
                                    {request.branchDispatchQuantities.some(item => item.confirmedQuantity !== undefined) && (
                                      <TableCell sx={{ fontWeight: 'bold', fontSize: '1.1rem', color: 'primary.main' }}>
                                        {request.branchDispatchQuantities.reduce((sum, item) => sum + (item.confirmedQuantity || 0), 0).toLocaleString()}개
                                      </TableCell>
                                    )}
                                  </>
                                )}
                              </TableRow>
                              <TableRow>
                                <TableCell sx={{ fontWeight: 'bold', fontSize: '1.1rem' }}>총계</TableCell>
                                <TableCell sx={{ fontWeight: 'bold', fontSize: '1.1rem', color: 'primary.main' }}>
                                  {request.totalRequestedQuantity.toLocaleString()}개
                                </TableCell>
                                {request.branchDispatchQuantities && (
                                  <>
                                    <TableCell sx={{ fontWeight: 'bold', fontSize: '1.1rem', color: 'primary.main' }}>
                                      {request.branchDispatchQuantities.reduce((sum, item) => sum + item.dispatchedQuantity, 0).toLocaleString()}개
                                    </TableCell>
                                    {request.branchDispatchQuantities.some(item => item.confirmedQuantity !== undefined) && (
                                      <TableCell sx={{ fontWeight: 'bold', fontSize: '1.1rem', color: 'primary.main' }}>
                                        {request.branchDispatchQuantities.reduce((sum, item) => sum + (item.confirmedQuantity || 0), 0).toLocaleString()}개
                                      </TableCell>
                                    )}
                                  </>
                                )}
                              </TableRow>
                            </TableBody>
                          </Table>
                        </TableContainer>
                      </CardContent>
                    </Collapse>
                  </Card>
                ) : (
                  // 지점 출고 처리 화면에서는 간단한 요약만 표시
                  <Card>
                    <CardContent>
                      <Typography variant="h6" gutterBottom>
                        📊 요청 수량 요약
                      </Typography>
                      <Box sx={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: 2 }}>
                        <Box sx={{ textAlign: 'center', p: 2, bgcolor: 'primary.50', borderRadius: 1 }}>
                          <Typography variant="body2" color="text.secondary">총 요청수량</Typography>
                          <Typography variant="h5" color="primary.main" fontWeight="bold">
                            {request.totalRequestedQuantity.toLocaleString()}개
                          </Typography>
                        </Box>
                        <Box sx={{ textAlign: 'center', p: 2, bgcolor: 'success.50', borderRadius: 1 }}>
                          <Typography variant="body2" color="text.secondary">지점 요청</Typography>
                          <Typography variant="h6" color="success.main" fontWeight="bold">
                            {request.branchRequirements.length}개 지점
                          </Typography>
                        </Box>
                        <Box sx={{ textAlign: 'center', p: 2, bgcolor: 'info.50', borderRadius: 1 }}>
                          <Typography variant="body2" color="text.secondary">물류 적정재고</Typography>
                          <Typography variant="h6" color="info.main" fontWeight="bold">
                            {request.logisticsStockQuantity.toLocaleString()}개
                          </Typography>
                        </Box>
                        {request.actualReceivedQuantity && (
                          <Box sx={{ textAlign: 'center', p: 2, bgcolor: 'warning.50', borderRadius: 1 }}>
                            <Typography variant="body2" color="text.secondary">창고 보유</Typography>
                            <Typography variant="h6" color="warning.main" fontWeight="bold">
                              {request.actualReceivedQuantity.toLocaleString()}개
                            </Typography>
                          </Box>
                        )}
                      </Box>
                    </CardContent>
                  </Card>
                )}

                {/* Phase 2: 진행 상세 정보 */}
                <Card>
                  <CardHeader
                    title="📈 진행 상세 정보"
                    action={
                      <IconButton
                        onClick={() => toggleSection('progressInfo')}
                        sx={{ transform: expandedSections.progressInfo ? 'rotate(180deg)' : 'rotate(0deg)', transition: 'transform 0.3s' }}
                      >
                        <ExpandMoreIcon />
                      </IconButton>
                    }
                    sx={{ pb: 1 }}
                  />
                  <Collapse in={expandedSections.progressInfo}>
                    <CardContent sx={{ pt: 0 }}>
                      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                        {/* 현재 진행 상태 정보 */}
                        <Box sx={{ p: 2, bgcolor: 'info.50', borderRadius: 1 }}>
                          <Typography variant="subtitle2" fontWeight="medium" color="info.main">
                            현재 진행 단계: {getStatusLabel(request.currentStatus)}
                          </Typography>
                          <Typography variant="body2" color="text.secondary" sx={{ mt: 0.5 }}>
                            {request.currentStatus === 'operations_submitted' && '물류팀 이카운트 등록 대기 중'}
                            {request.currentStatus === 'ecount_registered' && '물류팀 구매처 발주 진행 중'}
                            {request.currentStatus === 'po_completed' && '구매처 납품 후 물류창고 입고 대기 중'}
                            {request.currentStatus === 'warehouse_received' && '물류팀 지점 출고 준비 중'}
                            {request.currentStatus === 'partial_dispatched' && '일부 지점 출고 완료, 나머지 출고 진행 중'}
                            {request.currentStatus === 'branch_dispatched' && '운영팀 지점 입고 확인 대기 중'}
                            {request.currentStatus === 'branch_received_confirmed' && '모든 절차 완료'}
                          </Typography>
                        </Box>

                        {/* 단계별 상세 정보 */}
                        <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 2 }}>
                          {/* 구매처 발주 정보 */}
                          {request.expectedDeliveryDate && (
                            <>
                              <Box>
                                <Typography variant="body2" color="text.secondary">입고 예정일</Typography>
                                <Typography variant="body1">{request.expectedDeliveryDate.toLocaleDateString('ko-KR')}</Typography>
                              </Box>
                              <Box>
                                <Typography variant="body2" color="text.secondary">입고 예정 수량</Typography>
                                <Typography variant="body1">{request.expectedDeliveryQuantity?.toLocaleString()}개</Typography>
                              </Box>
                            </>
                          )}
                          
                          {/* 물류창고 입고 정보 */}
                          {request.actualReceivedQuantity && (
                            <>
                              <Box>
                                <Typography variant="body2" color="text.secondary">실제 입고일</Typography>
                                <Typography variant="body1">{request.warehouseReceiptAt?.toLocaleDateString('ko-KR')}</Typography>
                              </Box>
                              <Box>
                                <Typography variant="body2" color="text.secondary">실제 입고 수량</Typography>
                                <Typography variant="body1" fontWeight="medium" color="primary.main">
                                  {request.actualReceivedQuantity.toLocaleString()}개
                                </Typography>
                              </Box>
                            </>
                          )}

                          {/* 출고 진행 현황 */}
                          {request.branchDispatchQuantities && request.branchDispatchQuantities.length > 0 && (
                            <>
                              <Box>
                                <Typography variant="body2" color="text.secondary">출고 완료 지점</Typography>
                                <Typography variant="body1" color="success.main">
                                  {request.branchDispatchQuantities.filter(item => item.isDispatched).length} / {request.branchDispatchQuantities.length} 지점
                                </Typography>
                              </Box>
                              <Box>
                                <Typography variant="body2" color="text.secondary">총 출고 수량</Typography>
                                <Typography variant="body1" color="primary.main">
                                  {request.branchDispatchQuantities.reduce((sum, item) => sum + (item.isDispatched ? item.dispatchedQuantity : 0), 0).toLocaleString()}개
                                </Typography>
                              </Box>
                            </>
                          )}
                        </Box>

                        {/* 다음 단계 안내 */}
                        {request.currentStatus !== 'branch_received_confirmed' && (
                          <Box sx={{ p: 2, bgcolor: 'grey.50', borderRadius: 1, borderLeft: '4px solid', borderColor: 'primary.main' }}>
                            <Typography variant="body2" fontWeight="medium" gutterBottom>
                              💡 다음 단계
                            </Typography>
                            <Typography variant="body2" color="text.secondary">
                              {request.currentStatus === 'operations_submitted' && '물류팀에서 이카운트 ERP 시스템에 부품을 등록합니다.'}
                              {request.currentStatus === 'ecount_registered' && '물류팀에서 구매처에 발주하고 입고 예정일을 설정합니다.'}
                              {request.currentStatus === 'po_completed' && '구매처에서 납품하면 물류창고에서 입고 처리합니다.'}
                              {request.currentStatus === 'warehouse_received' && '물류팀에서 각 지점으로 출고 처리합니다.'}
                              {request.currentStatus === 'partial_dispatched' && '물류팀에서 나머지 지점 출고를 완료합니다.'}
                              {request.currentStatus === 'branch_dispatched' && '운영팀에서 각 지점의 입고를 확인합니다.'}
                            </Typography>
                          </Box>
                        )}
                      </Box>
                    </CardContent>
                  </Collapse>
                </Card>

                {/* 요청 메모 */}
                <Card>
                  <CardHeader
                    title="📝 요청 메모"
                    action={
                      <IconButton
                        onClick={() => toggleSection('memo')}
                        sx={{ transform: expandedSections.memo ? 'rotate(180deg)' : 'rotate(0deg)', transition: 'transform 0.3s' }}
                      >
                        <ExpandMoreIcon />
                      </IconButton>
                    }
                    sx={{ pb: 1 }}
                  />
                  <Collapse in={expandedSections.memo}>
                    <CardContent sx={{ pt: 0 }}>
                      {request.notes && (
                        <Box sx={{ mb: 2 }}>
                          <Typography variant="body2" color="text.secondary" gutterBottom>
                            기존 요청 메모
                          </Typography>
                          <Typography variant="body1" sx={{ p: 2, bgcolor: 'grey.50', borderRadius: 1 }}>
                            {request.notes}
                          </Typography>
                        </Box>
                      )}
                      <TextField
                        fullWidth
                        multiline
                        rows={4}
                        value={comment}
                        onChange={(e) => setComment(e.target.value)}
                        placeholder="요청에 대한 메모를 입력해주세요."
                      />
                    </CardContent>
                  </Collapse>
                </Card>

                {/* 처리 히스토리 */}
                <Card>
                  <CardHeader
                    title="📜 처리 히스토리"
                    action={
                      <IconButton
                        onClick={() => toggleSection('history')}
                        sx={{ transform: expandedSections.history ? 'rotate(180deg)' : 'rotate(0deg)', transition: 'transform 0.3s' }}
                      >
                        <ExpandMoreIcon />
                      </IconButton>
                    }
                    sx={{ pb: 1 }}
                  />
                  <Collapse in={expandedSections.history}>
                    <CardContent sx={{ pt: 0 }}>
                      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                        {request.statusHistory && request.statusHistory.length > 0 ? (
                          request.statusHistory
                            .slice()
                            .reverse()
                            .map((history, index) => (
                              <Box key={index} sx={{ p: 2, border: '1px solid', borderColor: 'grey.300', borderRadius: 1 }}>
                                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                                  <Chip
                                    label={getStatusLabel(history.status)}
                                    color={getStatusColor(history.status) as any}
                                    size="small"
                                  />
                                  <Typography variant="body2" color="text.secondary">
                                    {history.updatedAt.toLocaleDateString('ko-KR')} {history.updatedAt.toLocaleTimeString('ko-KR')}
                                  </Typography>
                                </Box>
                                <Typography variant="body2" color="text.secondary" gutterBottom>
                                  처리자: {history.updatedByName}
                                </Typography>
                                <Typography variant="body1">
                                  {history.comments}
                                </Typography>
                              </Box>
                            ))
                        ) : (
                          <Typography variant="body2" color="text.secondary" textAlign="center">
                            처리 히스토리가 없습니다.
                          </Typography>
                        )}
                      </Box>
                    </CardContent>
                  </Collapse>
                </Card>

                {/* 편집 모드에서 특정 섹션별 입력 폼 */}
                {editMode && editSection === 'ecount' && (
                  <Card>
                    <CardContent>
                      <Typography variant="h6" gutterBottom>
                        🏷️ 이카운트 등록 정보
                      </Typography>
                      
                      {/* 부품 정보 요약 */}
                      <Box sx={{ mb: 3, p: 2, bgcolor: 'info.50', borderRadius: 1 }}>
                        <Typography variant="subtitle2" fontWeight="medium" color="info.main" gutterBottom>
                          📦 부품 정보
                        </Typography>
                        <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 2 }}>
                          <Box>
                            <Typography variant="body2" color="text.secondary">부품번호</Typography>
                            <Typography variant="body1" fontWeight="medium">{request.requestedPartNumber}</Typography>
                          </Box>
                          <Box>
                            <Typography variant="body2" color="text.secondary">부품명</Typography>
                            <Typography variant="body1" fontWeight="medium">{request.requestedPartName}</Typography>
                          </Box>
                          <Box>
                            <Typography variant="body2" color="text.secondary">판매가</Typography>
                            <Typography variant="body1" fontWeight="medium" color="success.main">
                              {request.price ? `${request.price.toLocaleString()}원` : '미입력'}
                            </Typography>
                          </Box>
                          <Box>
                            <Typography variant="body2" color="text.secondary">추천 구매처</Typography>
                            <Typography variant="body1">{request.initialSupplier || '미지정'}</Typography>
                          </Box>
                        </Box>
                      </Box>

                      <Alert severity="info" sx={{ mb: 2 }}>
                        ✅ 운영부서 입력 정보가 먼저 표시됩니다. 필요시에만 수정해주세요.
                      </Alert>
                      <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: 2, mb: 2 }}>
                        <TextField
                          label="품목그룹 1"
                          value={itemGroup1}
                          onChange={(e) => setItemGroup1(e.target.value)}
                          required
                          error={!itemGroup1.trim()}
                          helperText={!itemGroup1.trim() ? '필수 입력' : '운영부서 입력 정보'}
                        />
                        <TextField
                          label="품목그룹 2"
                          value={itemGroup2}
                          onChange={(e) => setItemGroup2(e.target.value)}
                          required
                          error={!itemGroup2.trim()}
                          helperText={!itemGroup2.trim() ? '필수 입력' : '운영부서 입력 정보'}
                        />
                        <TextField
                          label="품목그룹 3"
                          value={itemGroup3}
                          onChange={(e) => setItemGroup3(e.target.value)}
                          required
                          error={!itemGroup3.trim()}
                          helperText={!itemGroup3.trim() ? '필수 입력' : '운영부서 입력 정보'}
                        />
                      </Box>
                      <TextField
                        fullWidth
                        multiline
                        rows={3}
                        label="수정 사유"
                        value={comment}
                        onChange={(e) => setComment(e.target.value)}
                        placeholder="이카운트 등록 정보를 수정하는 사유를 입력해주세요."
                        sx={{ mb: 2 }}
                      />
                    </CardContent>
                  </Card>
                )}

                {editMode && editSection === 'po' && (
                  <Card>
                    <CardContent>
                      <Typography variant="h6" gutterBottom>
                        🛒 구매처 발주 정보 수정
                      </Typography>
                      <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 2, mb: 2 }}>
                        <DatePicker
                          label="입고 예정일"
                          value={expectedDeliveryDate}
                          onChange={(newValue) => setExpectedDeliveryDate(newValue)}
                        />
                        <TextField
                          label="입고 예정 수량"
                          type="number"
                          value={expectedDeliveryQuantity}
                          onChange={(e) => setExpectedDeliveryQuantity(Number(e.target.value))}
                          InputProps={{ endAdornment: '개' }}
                        />
                        <TextField
                          label="실제 발주처"
                          value={actualSupplier}
                          onChange={(e) => setActualSupplier(e.target.value)}
                          placeholder={request.initialSupplier || '구매처를 입력하세요'}
                        />
                        <TextField
                          label="발주 메모"
                          value={poMemo}
                          onChange={(e) => setPoMemo(e.target.value)}
                          placeholder="발주 관련 메모"
                        />
                      </Box>
                      <TextField
                        fullWidth
                        multiline
                        rows={3}
                        label="수정 사유"
                        value={comment}
                        onChange={(e) => setComment(e.target.value)}
                        placeholder="구매처 발주 정보를 수정하는 사유를 입력해주세요."
                        required
                      />
                    </CardContent>
                  </Card>
                )}

                {editMode && editSection === 'warehouse' && (
                  <Card>
                    <CardContent>
                      <Typography variant="h6" gutterBottom>
                        📦 물류창고 입고 정보 수정
                      </Typography>
                      <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 2, mb: 2 }}>
                        <DatePicker
                          label="실제 입고일"
                          value={actualReceiptDate}
                          onChange={(newValue) => setActualReceiptDate(newValue)}
                        />
                        <TextField
                          label="실제 입고 수량"
                          type="number"
                          value={actualReceivedQuantity}
                          onChange={(e) => setActualReceivedQuantity(Number(e.target.value))}
                          InputProps={{ endAdornment: '개' }}
                        />
                        <TextField
                          label="입고 메모"
                          value={warehouseReceiptMemo}
                          onChange={(e) => setWarehouseReceiptMemo(e.target.value)}
                          placeholder="입고 관련 메모"
                          sx={{ gridColumn: '1 / -1' }}
                        />
                      </Box>
                      <TextField
                        fullWidth
                        multiline
                        rows={3}
                        label="수정 사유"
                        value={comment}
                        onChange={(e) => setComment(e.target.value)}
                        placeholder="물류창고 입고 정보를 수정하는 사유를 입력해주세요."
                        required
                      />
                    </CardContent>
                  </Card>
                )}

                {editMode && editSection === 'dispatch' && (
                  <Card>
                    <CardContent>
                      <Typography variant="h6" gutterBottom>
                        🚚 지점 출고 정보 수정
                      </Typography>
                      <Box sx={{ mb: 2 }}>
                        <Typography variant="body2" color="text.secondary" gutterBottom>
                          지점별 출고 수량 수정
                        </Typography>
                        {branchDispatchQuantities.map((branch, index) => (
                          <Box key={index} sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 1 }}>
                            <Typography variant="body2" sx={{ minWidth: 120 }}>
                              {branch.branchName}
                            </Typography>
                            <TextField
                              type="number"
                              size="small"
                              value={branch.dispatchedQuantity}
                              onChange={(e) => handleBranchDispatchQuantityChange(index, Number(e.target.value))}
                              InputProps={{ endAdornment: '개' }}
                              sx={{ width: 150 }}
                            />
                            {branch.isDispatched && (
                              <Chip label="출고완료" color="success" size="small" />
                            )}
                          </Box>
                        ))}
                        <TextField
                          label="출고 메모"
                          value={dispatchMemo}
                          onChange={(e) => setDispatchMemo(e.target.value)}
                          placeholder="출고 관련 메모"
                          fullWidth
                          sx={{ mt: 2 }}
                        />
                      </Box>
                      <TextField
                        fullWidth
                        multiline
                        rows={3}
                        label="수정 사유"
                        value={comment}
                        onChange={(e) => setComment(e.target.value)}
                        placeholder="지점 출고 정보를 수정하는 사유를 입력해주세요."
                      />
                    </CardContent>
                  </Card>
                )}

                {editMode && editSection === 'receipt' && (
                  <Card>
                    <CardContent>
                      <Typography variant="h6" gutterBottom>
                        ✅ 지점 입고 확인 정보 수정
                      </Typography>
                      <Box sx={{ mb: 2 }}>
                        <Typography variant="body2" color="text.secondary" gutterBottom>
                          지점별 수령 수량 및 메모 수정
                        </Typography>
                        {branchReceiptQuantities.map((branch, index) => (
                          <Box key={index} sx={{ p: 2, border: '1px solid', borderColor: 'grey.300', borderRadius: 1, mb: 2 }}>
                            <Typography variant="body2" fontWeight="medium" gutterBottom>
                              {branch.branchName}
                            </Typography>
                            <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 2 }}>
                              <TextField
                                label="출고 수량"
                                value={branch.dispatchedQuantity}
                                InputProps={{ endAdornment: '개', readOnly: true }}
                                size="small"
                              />
                              <TextField
                                label="수령 수량"
                                type="number"
                                value={branch.confirmedQuantity || 0}
                                onChange={(e) => handleBranchReceiptQuantityChange(index, Number(e.target.value))}
                                InputProps={{ endAdornment: '개' }}
                                size="small"
                              />
                            </Box>
                            <TextField
                              label="수령 메모"
                              value={branch.branchReceiptMemo || ''}
                              onChange={(e) => handleBranchReceiptMemoChange(index, e.target.value)}
                              placeholder="지점 수령 관련 메모"
                              fullWidth
                              size="small"
                              sx={{ mt: 1 }}
                            />
                          </Box>
                        ))}
                      </Box>
                      <TextField
                        fullWidth
                        multiline
                        rows={3}
                        label="수정 사유"
                        value={comment}
                        onChange={(e) => setComment(e.target.value)}
                        placeholder="지점 입고 확인 정보를 수정하는 사유를 입력해주세요."
                        required
                      />
                    </CardContent>
                  </Card>
                )}

                {/* 일반 모드에서 상태별 액션 폼 */}
                {!editMode && canChangeStatus && request.currentStatus === 'operations_submitted' && (
                  <Card>
                    <CardContent>
                      <Typography variant="h6" gutterBottom>
                        🏷️ 이카운트 등록
                      </Typography>
                      
                      {/* 부품 정보 요약 */}
                      <Box sx={{ mb: 3, p: 2, bgcolor: 'info.50', borderRadius: 1 }}>
                        <Typography variant="subtitle2" fontWeight="medium" color="info.main" gutterBottom>
                          📦 부품 정보
                        </Typography>
                        <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 2 }}>
                          <Box>
                            <Typography variant="body2" color="text.secondary">부품번호</Typography>
                            <Typography variant="body1" fontWeight="medium">{request.requestedPartNumber}</Typography>
                          </Box>
                          <Box>
                            <Typography variant="body2" color="text.secondary">부품명</Typography>
                            <Typography variant="body1" fontWeight="medium">{request.requestedPartName}</Typography>
                          </Box>
                          <Box>
                            <Typography variant="body2" color="text.secondary">판매가</Typography>
                            <Typography variant="body1" fontWeight="medium" color="success.main">
                              {request.price ? `${request.price.toLocaleString()}원` : '미입력'}
                            </Typography>
                          </Box>
                          <Box>
                            <Typography variant="body2" color="text.secondary">추천 구매처</Typography>
                            <Typography variant="body1">{request.initialSupplier || '미지정'}</Typography>
                          </Box>
                        </Box>
                      </Box>

                      <Alert severity="success" sx={{ mb: 2 }}>
                        ✅ 운영부서 입력 정보가 먼저 표시됩니다. 필요시에만 수정해주세요.
                      </Alert>
                      <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: 2, mb: 2 }}>
                        <TextField
                          label="품목그룹 1"
                          value={itemGroup1}
                          onChange={(e) => setItemGroup1(e.target.value)}
                          required
                          error={!itemGroup1.trim()}
                          helperText={!itemGroup1.trim() ? '필수 입력' : '운영부서 입력 정보'}
                        />
                        <TextField
                          label="품목그룹 2"
                          value={itemGroup2}
                          onChange={(e) => setItemGroup2(e.target.value)}
                          required
                          error={!itemGroup2.trim()}
                          helperText={!itemGroup2.trim() ? '필수 입력' : '운영부서 입력 정보'}
                        />
                        <TextField
                          label="품목그룹 3"
                          value={itemGroup3}
                          onChange={(e) => setItemGroup3(e.target.value)}
                          required
                          error={!itemGroup3.trim()}
                          helperText={!itemGroup3.trim() ? '필수 입력' : '운영부서 입력 정보'}
                        />
                      </Box>
                      <TextField
                        fullWidth
                        multiline
                        rows={3}
                        label="처리 코멘트"
                        value={comment}
                        onChange={(e) => setComment(e.target.value)}
                        placeholder="이카운트 등록에 대한 코멘트를 입력해주세요."
                        sx={{ mb: 2 }}
                      />
                    </CardContent>
                  </Card>
                )}

                {!editMode && canChangeStatus && request.currentStatus === 'ecount_registered' && (
                  <Card>
                    <CardContent>
                      <Typography variant="h6" gutterBottom>
                        🛒 구매처 발주 완료
                      </Typography>
                      <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 2, mb: 2 }}>
                        <DatePicker
                          label="입고 예정일 *"
                          value={expectedDeliveryDate}
                          onChange={(newValue) => setExpectedDeliveryDate(newValue)}
                        />
                        <TextField
                          label="입고 예정 수량 *"
                          type="number"
                          value={expectedDeliveryQuantity}
                          onChange={(e) => setExpectedDeliveryQuantity(Number(e.target.value))}
                          InputProps={{ endAdornment: '개' }}
                        />
                        <TextField
                          label="실제 발주처"
                          value={actualSupplier}
                          onChange={(e) => setActualSupplier(e.target.value)}
                          placeholder={request.initialSupplier || '구매처를 입력하세요'}
                        />
                        <TextField
                          label="발주 메모"
                          value={poMemo}
                          onChange={(e) => setPoMemo(e.target.value)}
                          placeholder="발주 관련 메모"
                        />
                      </Box>
                      <TextField
                        fullWidth
                        multiline
                        rows={3}
                        label="처리 코멘트 *"
                        value={comment}
                        onChange={(e) => setComment(e.target.value)}
                        placeholder="구매처 발주 완료에 대한 코멘트를 입력해주세요."
                        required
                      />
                    </CardContent>
                  </Card>
                )}

                {!editMode && canChangeStatus && request.currentStatus === 'po_completed' && (
                  <Card>
                    <CardContent>
                      <Typography variant="h6" gutterBottom>
                        📦 물류창고 입고 완료
                      </Typography>
                      <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 2, mb: 2 }}>
                        <DatePicker
                          label="실제 입고일 *"
                          value={actualReceiptDate}
                          onChange={(newValue) => setActualReceiptDate(newValue)}
                        />
                        <TextField
                          label="실제 입고 수량 *"
                          type="number"
                          value={actualReceivedQuantity}
                          onChange={(e) => setActualReceivedQuantity(Number(e.target.value))}
                          InputProps={{ endAdornment: '개' }}
                        />
                        <TextField
                          label="입고 메모"
                          value={warehouseReceiptMemo}
                          onChange={(e) => setWarehouseReceiptMemo(e.target.value)}
                          placeholder="입고 관련 메모"
                          sx={{ gridColumn: '1 / -1' }}
                        />
                      </Box>
                      <TextField
                        fullWidth
                        multiline
                        rows={3}
                        label="처리 코멘트 *"
                        value={comment}
                        onChange={(e) => setComment(e.target.value)}
                        placeholder="물류창고 입고 완료에 대한 코멘트를 입력해주세요."
                        required
                      />
                    </CardContent>
                  </Card>
                )}

                {!editMode && canChangeStatus && (request.currentStatus === 'warehouse_received' || request.currentStatus === 'partial_dispatched') && (
                  <Card>
                    <CardContent>
                      <Typography variant="h6" gutterBottom>
                        🚚 지점 출고 처리
                      </Typography>
                      <Box sx={{ mb: 2 }}>
                        <Typography variant="body2" color="text.secondary" gutterBottom>
                          지점별 출고 수량 설정
                        </Typography>
                        {branchDispatchQuantities.map((branch, index) => (
                          <Box key={index} sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 1, p: 1, bgcolor: branch.isDispatched ? 'success.50' : 'grey.50', borderRadius: 1 }}>
                            <Typography variant="body2" sx={{ minWidth: 120 }}>
                              {branch.branchName}
                            </Typography>
                            <TextField
                              type="number"
                              size="small"
                              value={branch.dispatchedQuantity}
                              onChange={(e) => handleBranchDispatchQuantityChange(index, Number(e.target.value))}
                              InputProps={{ endAdornment: '개' }}
                              sx={{ width: 150 }}
                            />
                            {branch.isDispatched ? (
                              <Button
                                size="small"
                                onClick={() => handleUndoBranchDispatch(index)}
                                color="warning"
                              >
                                출고취소
                              </Button>
                            ) : (
                              <Button
                                size="small"
                                onClick={() => handleIndividualBranchDispatch(index)}
                                color="primary"
                              >
                                출고완료
                              </Button>
                            )}
                            {branch.isDispatched && (
                              <Chip label="✅ 출고완료" color="success" size="small" />
                            )}
                          </Box>
                        ))}
                      </Box>
                      <TextField
                        label="출고 메모"
                        value={dispatchMemo}
                        onChange={(e) => setDispatchMemo(e.target.value)}
                        placeholder="출고 관련 메모"
                        fullWidth
                        sx={{ mb: 2 }}
                      />
                      <TextField
                        fullWidth
                        multiline
                        rows={3}
                        label="처리 코멘트"
                        value={comment}
                        onChange={(e) => setComment(e.target.value)}
                        placeholder="지점 출고에 대한 코멘트를 입력해주세요."
                      />
                    </CardContent>
                  </Card>
                )}

                {!editMode && canConfirmReceipt && request.currentStatus === 'branch_dispatched' && (
                  <Card>
                    <CardContent>
                      <Typography variant="h6" gutterBottom>
                        ✅ 지점 입고 확인
                      </Typography>
                      <Box sx={{ mb: 2 }}>
                        <Typography variant="body2" color="text.secondary" gutterBottom>
                          지점별 수령 수량 확인
                        </Typography>
                        {branchReceiptQuantities.map((branch, index) => (
                          <Box key={index} sx={{ p: 2, border: '1px solid', borderColor: 'grey.300', borderRadius: 1, mb: 2 }}>
                            <Typography variant="body2" fontWeight="medium" gutterBottom>
                              {branch.branchName}
                            </Typography>
                            <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 2 }}>
                              <TextField
                                label="출고 수량"
                                value={branch.dispatchedQuantity}
                                InputProps={{ endAdornment: '개', readOnly: true }}
                                size="small"
                              />
                              <TextField
                                label="수령 수량"
                                type="number"
                                value={branch.confirmedQuantity || 0}
                                onChange={(e) => handleBranchReceiptQuantityChange(index, Number(e.target.value))}
                                InputProps={{ endAdornment: '개' }}
                                size="small"
                              />
                            </Box>
                            <TextField
                              label="수령 메모"
                              value={branch.branchReceiptMemo || ''}
                              onChange={(e) => handleBranchReceiptMemoChange(index, e.target.value)}
                              placeholder="지점 수령 관련 메모"
                              fullWidth
                              size="small"
                              sx={{ mt: 1 }}
                            />
                          </Box>
                        ))}
                      </Box>
                      <TextField
                        fullWidth
                        multiline
                        rows={3}
                        label="처리 코멘트 *"
                        value={comment}
                        onChange={(e) => setComment(e.target.value)}
                        placeholder="지점 입고 확인에 대한 코멘트를 입력해주세요."
                        required
                      />
                    </CardContent>
                  </Card>
                )}
              </>
            )}
          </Box>
        </DialogContent>

        <DialogActions>
          {/* 편집 모드 버튼들 */}
          {editMode && editSection === 'ecount' && (
            <Button
              onClick={handleEcountUpdate}
              variant="contained"
              color="primary"
              disabled={processing || !itemGroup1.trim() || !itemGroup2.trim() || !itemGroup3.trim()}
            >
              {processing ? <CircularProgress size={20} /> : '이카운트 등록 정보 수정'}
            </Button>
          )}
          
          {editMode && editSection === 'po' && (
            <Button
              onClick={handlePOUpdate}
              variant="contained"
              color="primary"
              disabled={processing || !expectedDeliveryDate || expectedDeliveryQuantity <= 0 || !comment.trim()}
            >
              {processing ? <CircularProgress size={20} /> : '구매처 발주 정보 수정'}
            </Button>
          )}
          
          {editMode && editSection === 'warehouse' && (
            <Button
              onClick={handleWarehouseUpdate}
              variant="contained"
              color="primary"
              disabled={processing || !actualReceiptDate || actualReceivedQuantity <= 0 || !comment.trim()}
            >
              {processing ? <CircularProgress size={20} /> : '물류창고 입고 정보 수정'}
            </Button>
          )}
          
          {editMode && editSection === 'dispatch' && (
            <Button
              onClick={handleDispatchUpdate}
              variant="contained"
              color="primary"
              disabled={processing}
            >
              {processing ? <CircularProgress size={20} /> : '지점 출고 정보 수정'}
            </Button>
          )}
          
          {editMode && editSection === 'receipt' && (
            <Button
              onClick={handleReceiptUpdate}
              variant="contained"
              color="primary"
              disabled={processing || !comment.trim()}
            >
              {processing ? <CircularProgress size={20} /> : '지점 입고 확인 정보 수정'}
            </Button>
          )}

          {/* 일반 모드 상태별 액션 버튼들 */}
          {!editMode && canChangeStatus && request.currentStatus === 'operations_submitted' && (
            <Button
              onClick={handleEcountRegistration}
              variant="contained"
              color="primary"
              disabled={processing || !itemGroup1.trim() || !itemGroup2.trim() || !itemGroup3.trim()}
            >
              {processing ? <CircularProgress size={20} /> : '이카운트 등록 완료'}
            </Button>
          )}

          {!editMode && canChangeStatus && request.currentStatus === 'ecount_registered' && (
            <Button
              onClick={handlePOCompletion}
              variant="contained"
              color="primary"
              disabled={processing || !expectedDeliveryDate || expectedDeliveryQuantity <= 0 || !comment.trim()}
            >
              {processing ? <CircularProgress size={20} /> : '구매처 발주 완료'}
            </Button>
          )}

          {!editMode && canChangeStatus && request.currentStatus === 'po_completed' && (
            <Button
              onClick={handleWarehouseReceipt}
              variant="contained"
              color="primary"
              disabled={processing || !actualReceiptDate || actualReceivedQuantity <= 0 || !comment.trim()}
            >
              {processing ? <CircularProgress size={20} /> : '물류창고 입고 완료'}
            </Button>
          )}

          {!editMode && canChangeStatus && request.currentStatus === 'warehouse_received' && (
            <>
              <Button
                onClick={handlePartialDispatchSave}
                variant="outlined"
                color="primary"
                disabled={processing || branchDispatchQuantities.filter(b => b.isDispatched).length === 0}
              >
                {processing ? <CircularProgress size={20} /> : '부분 출고 저장'}
              </Button>
              <Button
                onClick={handleBranchDispatch}
                variant="contained"
                color="primary"
                disabled={processing || branchDispatchQuantities.some(b => !b.isDispatched)}
              >
                {processing ? <CircularProgress size={20} /> : '전체 지점 출고 완료'}
              </Button>
            </>
          )}

          {!editMode && canChangeStatus && request.currentStatus === 'partial_dispatched' && (
            <>
              <Button
                onClick={handleSaveCurrentState}
                variant="outlined"
                color="primary"
                disabled={processing}
              >
                {processing ? <CircularProgress size={20} /> : '현재 상태 저장'}
              </Button>
              <Button
                onClick={handleBranchDispatch}
                variant="contained"
                color="primary"
                disabled={processing || branchDispatchQuantities.some(b => !b.isDispatched)}
              >
                {processing ? <CircularProgress size={20} /> : '전체 지점 출고 완료'}
              </Button>
            </>
          )}

          {!editMode && canConfirmReceipt && request.currentStatus === 'branch_dispatched' && (
            <Button
              onClick={handleBranchReceiptConfirmation}
              variant="contained"
              color="primary"
              disabled={processing || !comment.trim()}
            >
              {processing ? <CircularProgress size={20} /> : '지점 입고 확인 완료'}
            </Button>
          )}

          <Button onClick={onClose} color="secondary">
            닫기
          </Button>
        </DialogActions>
      </Dialog>
    </LocalizationProvider>
  );
};

export default PurchaseRequestDetail;